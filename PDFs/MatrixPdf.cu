/*****************************************************************************
 * Project: GooFit                                                           *
 *                                                                           *
 * This code was autogenerated by                             *
 *                                                                           *
 * A simple AA PDF class by Ivan Heredia de la Cruz on 4/25/16.              *
 *****************************************************************************/

#include <math.h>
#include "TMath.h"

#include <map>
#include <string>


EXEC_TARGET devcomplex<fptype> WignerD_J(std::string helJ, std::string helDmu, fptype angle) const
{

  devcomplex<fptype> imJ(0.,1.);

  if (helJ=="m1") {
    if (helDmu=="m1")
      return +((+1. + cJ)*exp(imJ*angle))/2.;
    else if (helDmu=="p1")
      return -((-1. + cJ)*exp(imJ*angle))/2.;
    else {
      cout <<"helDmu = " <<helDmu <<" not allowed in \"WignerD_J\" functions for helJ = " <<helJ <<" at the moment. Returning 0 -> \"AngularTerm\" = 0" <<endl ;
      return 0; }
  } else if (helJ=="0") {
    if (helDmu=="m1")
      return -(pow(1. - pow(cJ,2))/TMath::Sqrt2());
    else if (helDmu=="p1")
      return +(pow(1. - pow(cJ,2))/TMath::Sqrt2());
    else {
      cout <<"helDmu = " <<helDmu <<" not allowed in \"WignerD_J\" functions for helJ = " <<helJ <<" at the moment. Returning 0 -> \"AngularTerm\" = 0" <<endl ;
      return 0; }
  } else if(helJ=="p1") {
    if (helDmu=="m1")
      return -(-1. + cJ)/(2.*exp(imJ*angle));
    else if (helDmu=="p1")
      return +(+1. + cJ)/(2.*exp(imJ*angle));
    else {
      cout <<"helDmu = " <<helDmu <<" not allowed in \"WignerD_J\" functions for helJ = " <<helJ <<" at the moment. Returning 0 -> \"AngularTerm\" = 0" <<endl ;
      return 0; }
  } else {
    cout <<"helJ = " <<helJ <<" not allowed in \"WignerD_J\" functions at the moment. Returning 0 -> \"AngularTerm\" = 0" <<endl ;
    return 0;
  }

}
